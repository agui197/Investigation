fxpg<-1000 #desempe?o valor inicial del mejor global
fxpL<-list()
for(j in 1:length(seq(np))){
fxpL[[j]]<-c(fxpg) #desempe?o delos mejores locales
}
c1<-0.3 #Velocidad de convergencia al  mejor global
c2<-0.3 #velocidad de convergencia al mejor local
#iteraciones
for(k in 1:length(seq(iterations))){
fx<-list()
a<- -1000
for(i in 1:length(seq(np))){
suma<-list()
for(l in 1:v){
suma[[l]]<-max(-x1p[[i]][l][[1]],0)
}
t<-trading_PMP(Historico,v,array(as.numeric(unlist(x1p[[i]][1:v]))),x1p[[i]][v+1][[1]],x1p[[i]][v+2][[1]],cap)
fx[[i]]<- -(t+a*abs(cumsum(x1p[[1]][1:v])[v]-1)+a*cumsum(suma)[v]+a*max(-x1p[[1]][[v+1]],0)+a*max(x1p[[1]][[v+1]]-1,0)+a*max(-x1p[[1]][[v+2]],0)+a*max(x1p[[1]][[v+2]]-1,0))
}
ind<-which.min(fx)
val<-fx[[ind]]
if(val<fxpg){
x1pg<-x1p[[ind]]
fxpg<-val;
}
for(p in 1:seq((length(np)))){
if(fx[[p]]<fxpL[[p]]){
x1pL[[p]]<-x1p[[p]]
}
}
for(p in 1:seq(length(np))){
vx1[[p]]=vx1[[p]]+c1*runif(3, min=0, max=1)*(x1pg-x1p[[p]])+c2*runif(3, min=0, max=1)*(x1pL[[p]]-x1p[[p]])
}
}
optime_result<-trading_PMP(Historico,v,x1pg[1:v],x1pg[v+1],x1pg[v+2],cap)
x1p[[p]]
x1pg
x1pg
x1pL
for(p in 1:seq(length(np))){
vx1[[p]]=array(as.numeric(unlist(vx1[[p]])))+c1*runif(v+2, min=0, max=1)*(array(as.numeric(unlist(x1pg)))-array(as.numeric(unlist(x1p[[p]]))))+c2*runif(v+2, min=0, max=1)*(array(as.numeric(unlist(x1pL[[p]])))-array(as.numeric(unlist(x1p[[p]]))))
}
(library(tictoc))
tic()
np<-20; #N?mero de particulas
iterations<-20
#inicializaci?n
x1p<-list()
vx1<-list()
for(j in 1:length(seq(np))){
x1p[[j]]<-list()
vx1[[j]]<-list()
}
for(j in 1:length(seq(np))){
x1p[[j]][1:v]<-pond
x1p[[j]][v+1]<-runif(1, min=0, max=.9)
x1p[[j]][v+2]<-runif(1, min=0, max=.9)
}
x1pg<-list()
for(j in 1:(length(v)+2)){
x1pg[[j]]<-0
}
for(j in 1:length(seq(np))){
for(l in 1:(v+2)){
vx1[[j]][l]<-0
}
}
x1pL<-x1p
fxpg<-1000 #desempe?o valor inicial del mejor global
fxpL<-list()
for(j in 1:length(seq(np))){
fxpL[[j]]<-c(fxpg) #desempe?o delos mejores locales
}
c1<-0.3 #Velocidad de convergencia al  mejor global
c2<-0.3 #velocidad de convergencia al mejor local
#iteraciones
for(k in 1:length(seq(iterations))){
fx<-list()
a<- -1000
for(i in 1:length(seq(np))){
suma<-list()
for(l in 1:v){
suma[[l]]<-max(-x1p[[i]][l][[1]],0)
}
t<-trading_PMP(Historico,v,array(as.numeric(unlist(x1p[[i]][1:v]))),x1p[[i]][v+1][[1]],x1p[[i]][v+2][[1]],cap)
fx[[i]]<- -(t+a*abs(cumsum(x1p[[1]][1:v])[v]-1)+a*cumsum(suma)[v]+a*max(-x1p[[1]][[v+1]],0)+a*max(x1p[[1]][[v+1]]-1,0)+a*max(-x1p[[1]][[v+2]],0)+a*max(x1p[[1]][[v+2]]-1,0))
}
ind<-which.min(fx)
val<-fx[[ind]]
if(val<fxpg){
x1pg<-x1p[[ind]]
fxpg<-val;
}
for(p in 1:seq((length(np)))){
if(fx[[p]]<fxpL[[p]]){
x1pL[[p]]<-x1p[[p]]
}
}
for(p in 1:seq(length(np))){
vx1[[p]]=array(as.numeric(unlist(vx1[[p]])))+c1*runif(v+2, min=0, max=1)*(array(as.numeric(unlist(x1pg)))-array(as.numeric(unlist(x1p[[p]]))))+c2*runif(v+2, min=0, max=1)*(array(as.numeric(unlist(x1pL[[p]])))-array(as.numeric(unlist(x1p[[p]]))))
}
}
optime_result<-trading_PMP(Historico,v,x1pg[1:v],x1pg[v+1],x1pg[v+2],cap)
toc()
optime_result<-trading_PMP(Historico,v,array(as.numeric(unlist(x1pg[1:v]))),x1pg[v+1][[1]],x1pg[v+2][[1]],cap)
optime_result
x1pg
tic()
np<-50; #N?mero de particulas
iterations<-100
#inicializaci?n
x1p<-list()
vx1<-list()
for(j in 1:length(seq(np))){
x1p[[j]]<-list()
vx1[[j]]<-list()
}
for(j in 1:length(seq(np))){
x1p[[j]][1:v]<-pond
x1p[[j]][v+1]<-runif(1, min=0, max=.9)
x1p[[j]][v+2]<-runif(1, min=0, max=.9)
}
x1pg<-list()
for(j in 1:(length(v)+2)){
x1pg[[j]]<-0
}
for(j in 1:length(seq(np))){
for(l in 1:(v+2)){
vx1[[j]][l]<-0
}
}
x1pL<-x1p
fxpg<-1000 #desempe?o valor inicial del mejor global
fxpL<-list()
for(j in 1:length(seq(np))){
fxpL[[j]]<-c(fxpg) #desempe?o delos mejores locales
}
c1<-0.3 #Velocidad de convergencia al  mejor global
c2<-0.3 #velocidad de convergencia al mejor local
#iteraciones
for(k in 1:length(seq(iterations))){
fx<-list()
a<- -1000
for(i in 1:length(seq(np))){
suma<-list()
for(l in 1:v){
suma[[l]]<-max(-x1p[[i]][l][[1]],0)
}
t<-trading_PMP(Historico,v,array(as.numeric(unlist(x1p[[i]][1:v]))),x1p[[i]][v+1][[1]],x1p[[i]][v+2][[1]],cap)
fx[[i]]<- -(t+a*abs(cumsum(x1p[[1]][1:v])[v]-1)+a*cumsum(suma)[v]+a*max(-x1p[[1]][[v+1]],0)+a*max(x1p[[1]][[v+1]]-1,0)+a*max(-x1p[[1]][[v+2]],0)+a*max(x1p[[1]][[v+2]]-1,0))
}
ind<-which.min(fx)
val<-fx[[ind]]
if(val<fxpg){
x1pg<-x1p[[ind]]
fxpg<-val;
}
for(p in 1:seq((length(np)))){
if(fx[[p]]<fxpL[[p]]){
x1pL[[p]]<-x1p[[p]]
}
}
for(p in 1:seq(length(np))){
vx1[[p]]=array(as.numeric(unlist(vx1[[p]])))+c1*runif(v+2, min=0, max=1)*(array(as.numeric(unlist(x1pg)))-array(as.numeric(unlist(x1p[[p]]))))+c2*runif(v+2, min=0, max=1)*(array(as.numeric(unlist(x1pL[[p]])))-array(as.numeric(unlist(x1p[[p]]))))
}
}
x1pg
optime_result<-trading_PMP(Historico,v,array(as.numeric(unlist(x1pg[1:v]))),x1pg[v+1][[1]],x1pg[v+2][[1]],cap)
# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()
(library(tictoc))
# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")
# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")
# -- Cargar y/o instalar en automatico paquetes a utilizar -- #
pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
"gridExtra","httr","jsonlite","lmtest","lubridate","moments",
"matrixStats", "PerformanceAnalytics","plyr","quantmod",
"reshape2","RCurl","RMySQL", "stats","scales","tseries",
"TTR","TSA","XML","xts","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- Cargar archivos desde GitHub -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- Parametros para usar API-OANDA
# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
#870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "America/Mexico_City"
# Instrumento
OA_In <- "EUR_USD"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
OA_Pr <- "D"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = NULL, End = NULL, Count = 900)
# calcular ganancias va a ser el precio de cierre menos el precio de apertura por
# los 10,000 unidadeas que compraremos (para que el valor del pip sea 1$) por el
# valor del pip
OA_Ai <- "101-004-7192278-001"
OA_Ak <-"870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
t <- NewOrder(OA_At,OA_Ai,OA_Ak,'market',OA_In,1000)
OA_Ai <- "101-004-7192278-001"
OA_Ak <-"870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
t <- NewOrder(OA_At,OA_Ai,OA_Ak,'market',OA_In,1000,'Buy')
OA_Ai <- "101-004-7192278-001"
OA_Ak <-"870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
t <- NewOrder(OA_At,OA_Ai,OA_Ak,'market',OA_In,1000,'Buy','','','')
OA_Ai <- "101-004-7192278-001"
OA_Ak <-"870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
t <- NewOrder(OA_At,OA_Ai,OA_Ak,'market',OA_In,1000,'Buy','','','','')
OA_Ai <- "101-004-7192278-001"
OA_Ak <-"870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
t <- NewOrder(OA_At,OA_Ai,OA_Ak,'market',OA_In,1000,'Buy','','','','','')
OA_Ai <- "101-004-7192278-001"
OA_Ak <-"870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
t <- NewOrder(OA_At,OA_Ai,OA_Ak,'market',OA_In,1000,'buy','','','','','')
OA_Ai <- 7192278
OA_Ak <-"870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
t <- NewOrder(OA_At,OA_Ai,OA_Ak,'market',OA_In,1000,'buy','','','','','')
# -- Rquired Packages in order to use the R API
library("downloader")
library("RCurl")
library("jsonlite")
library("httr")
# -- Load locally from GitHub the API
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- ---------------------------------------------------------------------------------- #
# -- General Values of Parameters in API ---------------------------------------------- #
# -- ---------------------------------------------------------------------------------- #
# -- character ---- # Your Account Type "practice" or "live"
OA_At <- "practice"
# -- numeric ------ # Your Account ID
OA_Ai <- 7192278
# -- character ---- # Your Token
OA_Ak <- "870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
# -- numeric ------ # Hour of the "End of the Day"
OA_Da <- 17
# -- character ---- # Time Zone in format "Continent/Zone
OA_Ta <- "America%2FMexico_City"
# -- character ---- # Instrument in format "CURRENCY_CURRENCY"
OA_In <- "EUR_USD"
# -- character ---- # Granularity of the prices
OA_Gn <- "D"
# -- character ---- # Initial Date
OA_F1Px <- "2017-01-01"
# -- character ---- # Final Date
OA_F2Px <- "2018-10-01"
# -- character ---- # Order Type to place "market" or "limit"
OA_Ot <- "market"
# -- numeric ------ # Order's Lot Size to open
OA_Ls <- 1
# -- character ---- # Side of the order, "buy" or "sell"
OA_Sd <- "buy"
# -- character ---- # Expery date of the order
OA_Ex <- "2018-10-02"
# -- numeric ------ # The price to execute the order
OA_Pr <- 1
# -- numeric ------ # Take Profit
OA_Tp <- 1
# -- numeric ------ # Stop Loss
OA_Sl <- 1
# -- numeric ------ # Trailing Stop
OA_Ts <- 1
# -------------------------------------------------------------- Basic Trade Example -- #
# -- Step 0 .- Get System Time -------------------------------------------------------- #
# -- Step 1 .- Get Instrument Lists --------------------------------------------------- #
# -- Step 2 .- Get current price of a chosen instrument ------------------------------- #
# -- Step 3 .- Open a "buy" MARKET ORDER of previously chosen instrument -------------- #
# -- Step 4 .- Get TradeID of previously Opened trade --------------------------------- #
# -- Step 5 .- Modify TP and SL ------------------------------------------------------- #
# -- Step 6 .- Close TradeID ---------------------------------------------------------- #
# ------------------------------------------------------------------------------------- #
# -- 0.- Get System Time
Step0 <- Sys.time()
# -- 1.- Get Instrument Lists
Step1 <- InstrumentsList(OA_At,OA_Ak,OA_Ai)
# -- 2 .- Get current price of a chosen instrument
OA_In <- Step1[1,] # AU200_AUD
Step2 <- ActualPrice(OA_At,OA_Ak,OA_In$Instrument)
# -- 3 .- Open a "buy" market order of previously chosen instrument
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = OA_Ot,
Instrument = OA_In$Instrument,
Count  = OA_Ls,
Side   = OA_Sd,
SL = trunc(Step2$Ask*0.95), # 5  % loss
TP = trunc(Step2$Ask*1.10), # 10 % Profit
TS = 100)                   # 10 Pips for Trailing Stop
OA_In
# -- 3 .- Open a "buy" market order of previously chosen instrument
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = OA_Ot,
Instrument = OA_In,
Count  = OA_Ls,
Side   = OA_Sd,
SL = trunc(1.15), # 5  % loss
TP = trunc(1.16), # 10 % Profit
TS = 100)                   # 10 Pips for Trailing Stop
OA_Ai <- 1742531
# -- character ---- # Your Token
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
# -- 3 .- Open a "buy" market order of previously chosen instrument
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = OA_Ot,
Instrument = OA_In,
Count  = OA_Ls,
Side   = OA_Sd,
SL = trunc(1.15), # 5  % loss
TP = trunc(1.16), # 10 % Profit
TS = 100)                   # 10 Pips for Trailing Stop
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = NULL, End = NULL, Count = 900)
# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()
(library(tictoc))
# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")
# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")
# -- Cargar y/o instalar en automatico paquetes a utilizar -- #
pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
"gridExtra","httr","jsonlite","lmtest","lubridate","moments",
"matrixStats", "PerformanceAnalytics","plyr","quantmod",
"reshape2","RCurl","RMySQL", "stats","scales","tseries",
"TTR","TSA","XML","xts","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- Cargar archivos desde GitHub -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- Parametros para usar API-OANDA
# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
#870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "America/Mexico_City"
# Instrumento
OA_In <- "EUR_USD"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
OA_Pr <- "D"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = NULL, End = NULL, Count = 900)
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = OA_Ot,
Instrument = OA_In,
Count  = OA_Ls,
Side   = OA_Sd,
SL = trunc(1.15), # 5  % loss
TP = trunc(1.16), # 10 % Profit
TS = 100)
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = "market",
Instrument = OA_In,
Count  = 1,
Side   = "buy",
SL = trunc(1.15), # 5  % loss
TP = trunc(1.16), # 10 % Profit
TS = 100)                   # 10 Pips for Trailing Stop
Step4 <- OpenTrades(AccountType = OA_At,
AccountID = OA_Ai,
Token = OA_Ak,
Instrument = OA_In)
View(Step4)
View(Step4)
Step1 <- InstrumentsList(OA_At,OA_Ak,OA_Ai)
View(Step1)
View(Step1)
OA_In$Instrument
OA_In
Step2 <- ActualPrice(OA_At,OA_Ak,OA_In)
View(Step2)
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = OA_Ot,
Instrument = OA_In,
Count  = OA_Ls,
Side   = OA_Sd,
SL = trunc(Step2$Ask*0.95), # 5  % loss
TP = trunc(Step2$Ask*1.10), # 10 % Profit
TS = 100)
OA_Ot <- "market"
OA_Sd <- "buy"
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = OA_Ot,
Instrument = OA_In,
Count  = OA_Ls,
Side   = OA_Sd,
SL = trunc(Step2$Ask*0.95), # 5  % loss
TP = trunc(Step2$Ask*1.10), # 10 % Profit
TS = 100)
OA_Ot <- "market"
OA_Sd <- "buy"
OA_Ls <- 1
Step3 <- NewOrder(AccountType = OA_At,
AccountID  = OA_Ai,
Token = OA_Ak,
OrderType  = OA_Ot,
Instrument = OA_In,
Count  = OA_Ls,
Side   = OA_Sd,
SL = trunc(Step2$Ask*0.95), # 5  % loss
TP = trunc(Step2$Ask*1.10), # 10 % Profit
TS = 100)
OA_Ai <- 1742531
# -- character ---- # Your Token
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
Step4 <- OpenTrades(AccountType = OA_At,
AccountID = OA_Ai,
Token = OA_Ak,
Instrument = OA_In)
View(Step4)
View(Step4)
# -- numeric ------ # Your Account ID
OA_Ai <- 7192278
# -- character ---- # Your Token
OA_Ak <- "870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
Step4 <- OpenTrades(AccountType = OA_At,
AccountID = OA_Ai,
Token = OA_Ak,
Instrument = OA_In)
View(Step4)
Step4[["moreInfo"]]
Step4[["message"]]
OA_Ai <- "101-004-7192278-001"
# -- character ---- # Your Token
OA_Ak <- "870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
Step4 <- OpenTrades(AccountType = OA_At,
AccountID = OA_Ai,
Token = OA_Ak,
Instrument = OA_In)
View(Step4)
Step4[["message"]]
Step4[["moreInfo"]]
OA_Ai <- 1010047192278001
# -- character ---- # Your Token
OA_Ak <- "870df85bef319db8175cddfde64099d6-ecaeac19655a8a30b16a70e7e3421924"
Step4 <- OpenTrades(AccountType = OA_At,
AccountID = OA_Ai,
Token = OA_Ak,
Instrument = OA_In)
View(Step4)
z<- runif(n)*20
setwd("~/Documents/Iteso/Investigation/Energy PSO")
z<- runif(n)*20
# Creaci?n de la recta con ruido ####
x<-seq(from = 1, to = 100,by = 1)
n <- length(x)
z<- runif(n)*20
source('~/Documents/Iteso/Investigation/Energy PSO/PSO.R', echo=TRUE)
pso_psoptim$sol
pso_psoptim$sol[0]
pso_psoptim$sol[1]
pso_psoptim$sol[2]
y2<- pso_psoptim$sol[1]*x + pso_psoptim$sol[1] + z
plot(y2)
y2<- pso_psoptim$sol[1]*x + pso_psoptim$sol[1]
plot(y2)
plot(y,y2)
plot(y)
plot(y2,type="l",col="red")
plot(y)
lines(y2,type="l",col="red")
source('~/Documents/Iteso/Investigation/Energy PSO/PSO.R', echo=TRUE)
source('~/Documents/Iteso/Investigation/Energy PSO/PSO.R', echo=TRUE)
